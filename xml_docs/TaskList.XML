<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskList</name>
    </assembly>
    <members>
        <member name="T:TaskList.App">
            <summary>
            Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="M:TaskList.App.#ctor">
            <summary>
            Initializes the singleton application object.  This is the first line of authored code
            executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:TaskList.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched normally by the end user.  Other entry points
            will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:TaskList.App.OnNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
            <summary>
            Invoked when Navigation to a certain page fails
            </summary>
            <param name="sender">The Frame which failed navigation</param>
            <param name="e">Details about the navigation failure</param>
        </member>
        <member name="M:TaskList.App.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:TaskList.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:TaskList.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:TaskList.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:TaskList.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TaskList.Folder" -->
        <member name="T:TaskList.Habit">
            <summary>
            
            • Habits.A habit is a sub-class of the repeating task which keeps track of how long you have successfully been
            completing the task.For example, if you have a habit task for exercise and you have exercised every day for five
            days, it would know you have a streak of five days. If you miss a day, the streak is broken and resets to zero.
            
            </summary>
        </member>
        <member name="T:TaskList.MainPage">
            <summary>
            A program to track and manage someone’s tasks - ie a “to do” list app.
            no save or load data(yet…) and no user interface. 
            The important part at this stage is the handling of the data.
            
            Testing
            Create some tasks and folders, and write some code to test everything is working correctly
            
            </summary>
        </member>
        <member name="M:TaskList.MainPage.CreateTaskFromInput(System.String)">
            <summary>
            Method to parse the input, and clean it checking for dates, ordinals and specific words or chars
            Using Microsoft.Recognizers Nuget packages, and regex.
            References:
            https://github.com/microsoft/Recognizers-Text/tree/master/.NET/Samples
            https://starbeamrainbowlabs.com/blog/article.php?article=posts%2F325-AI-Microsoft-Text-Recognizers.html
            https://stackoverflow.com/questions/52593835/parsing-timex-expressions-in-net-core
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.GetDescription(System.String)">
            <summary>
            This Method splits the input string into tokens using regex
            removes any stop words (common words like "a", "the", "with", etc. as required) 
            Then joins the remaining tokens back into a string.
            https://www.geeksforgeeks.org/write-regular-expressions/#google_vignette
            https://www.tutorialspoint.com/Initializing-HashSet-in-Chash
            https://www.geeksforgeeks.org/hashset-in-c-sharp-with-examples/
            https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.split?view=net-8.0
            https://www.dotnetperls.com/regex-split
            https://thedeveloperblog.com/c-sharp/regex-split
            </summary>
            <param name="cleanedInput"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.CheckUserInput(System.String)">
            <summary>
            Function to get a string tuple of teh cleaned description,
            and the date as a string and display it in the UI
            </summary>
            <param name="userInput"></param>
        </member>
        <member name="M:TaskList.MainPage.Button_Click(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Button CLick Event for recieving input from user and converting it to a Task
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TaskList.MainPage.ErrorMessage">
            <summary>
            Error Message Function for invalid input
            </summary>
        </member>
        <member name="M:TaskList.MainPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:TaskList.MainPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:TaskList.MainPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TaskList.RepeatTask" -->
        <!-- Badly formed XML comment ignored for member "T:TaskList.Tasks" -->
        <member name="F:TaskList.Tasks.AllTasksList">
            <summary>
            Static list to hold all of the tasks
            </summary>
        </member>
        <member name="F:TaskList.Tasks.TasksByDateIndex">
            <summary>
            Static list to all tasks sorted by date
            </summary>
        </member>
        <member name="F:TaskList.Tasks.TasksByDescriptionIndex">
            <summary>
            Static class to hold all tasks sorted by description
            </summary>
        </member>
        <member name="M:TaskList.Tasks.AddTask(TaskList.Tasks)">
            <summary>
            A static method to add new tasks to the static list
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:TaskList.Tasks.RemoveTask(System.Guid)">
            <summary>
            A static method to remove a task from the static list using its GUID
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="M:TaskList.Tasks.GetTaskById(System.Guid)">
            <summary>
            Static method to get a task by its ID
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.Tasks.SearchByDescription(System.String)">
            <summary>
            Search tasks with a given description
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.Tasks.SearchByDueDate(System.Nullable{System.DateTime})">
            <summary>
            Search tasks with a given due date
            </summary>
            <param name="dueDate"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.Tasks.SortTasksByDate">
            <summary>
            Sort the tasks by date
            </summary>
        </member>
        <member name="M:TaskList.Tasks.SortTasksByDescription">
            <summary>
            Sort tasks by description
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TaskList.Tasks.UpdateTasksIndexes" -->
        <member name="M:TaskList.Tasks.ToString">
            <summary>
            Method that displays a Task description, notes and dateDue as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:TaskList.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
