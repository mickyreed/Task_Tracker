<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskList</name>
    </assembly>
    <members>
        <member name="T:TaskList.App">
            <summary>
            Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="M:TaskList.App.#ctor">
            <summary>
            Initializes the singleton application object.  This is the first line of authored code
            executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:TaskList.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched normally by the end user.  Other entry points
            will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:TaskList.App.OnNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
            <summary>
            Invoked when Navigation to a certain page fails
            </summary>
            <param name="sender">The Frame which failed navigation</param>
            <param name="e">Details about the navigation failure</param>
        </member>
        <member name="M:TaskList.App.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:TaskList.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:TaskList.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:TaskList.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:TaskList.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TaskList.Folder" -->
        <member name="P:TaskList.Folder.taskId">
            <summary>
            A list of tasks that the folder contains referenced by GUID
            if a task is meant to be in that folder, then it’s ID will be in the list. 
            </summary>
        </member>
        <member name="M:TaskList.Folder.incompleteTasksTotal">
            <summary>
            A calculated property that is the total number of incomplete tasks in the folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.Folder.#ctor(System.String)">
            <summary>
            Folder Constructor method
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TaskList.Folder.AddTask(System.Guid)">
            <summary>
            A method that will add a task to the folder.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:TaskList.Folder.RemoveTask(System.Guid)">
            <summary>
            A method that will remove a task from the folder, given it’s ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="F:TaskList.Folder.AllFoldersList">
            <summary>
            A static list to hold all of the folders
            </summary>
        </member>
        <member name="M:TaskList.Folder.AddFolder(TaskList.Folder)">
            <summary>
            A static method to add new folders to the static list
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:TaskList.Folder.RemoveFolder(TaskList.Folder)">
            <summary>
            A static method to remove a folder from the static list using its GUID
            </summary>
            <param name="folder"></param>
        </member>
        <member name="T:TaskList.FolderDataManagerSQL">
            <summary>
            A class to manage folder data to an sql database
            </summary>
        </member>
        <member name="F:TaskList.FolderDataManagerSQL.database">
            <summary>
            Sqlite database connection
            </summary>
        </member>
        <member name="F:TaskList.FolderDataManagerSQL.filename">
            <summary>
            declares the name of the database
            </summary>
        </member>
        <member name="M:TaskList.FolderDataManagerSQL.InitialiseDatabase">
            <summary>
            A method which initialises the database "open" ready for access
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.FolderDataManagerSQL.LoadDataBaseAsync">
            <summary>
            A Task to load the database and or create a table if not existing
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.FolderDataManagerSQL.UpdateDataBaseAsync(TaskList.Folder)">
            <summary>
            A Task to update the database with a folder if it is added
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.FolderDataManagerSQL.AddFolderAsync(TaskList.Folder)">
            <summary>
            Helper task to call the UpdateFolderDataBaseAsync method with the folder
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.FolderDataManagerSQL.DeleteFolderByIdAsync(System.Guid)">
            <summary>
            Task to delete a task from the database given its id
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="T:TaskList.Habit">
            <summary>
            
            • Habits.A habit is a sub-class of the repeating task which keeps track of how long you have successfully been
            completing the task.For example, if you have a habit task for exercise and you have exercised every day for five
            days, it would know you have a streak of five days. If you miss a day, the streak is broken and resets to zero.
            
            </summary>
        </member>
        <member name="T:TaskList.MainPage">
            <summary>
            A program to track and manage someone’s tasks - ie a “to do” list app.
            no save or load data(yet…) and no user interface. 
            The important part at this stage is the handling of the data.
            
            Testing
            Create some tasks and folders, and write some code to test everything is working correctly
            
            </summary>
        </member>
        <member name="M:TaskList.MainPage.LoadData">
            <summary>
            Method to call the Loading of  Task and Folder Data from storage
            </summary>
        </member>
        <member name="M:TaskList.MainPage.RunTests">
            <summary>
            Function that includes Test Methods used in Testing
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.DataLoaded">
            <summary>
            Function called after data is loaded runs input Tests and create Task from input Methods
            </summary>
        </member>
        <member name="M:TaskList.MainPage.SaveData">
            <summary>
            Functiomn to save data from Tasks and Files to file in Binary format
            </summary>
        </member>
        <member name="M:TaskList.MainPage.UpdateData">
            <summary>
            this function will update the data after each change and save to the file
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.UpdateTaskIndexes">
            <summary>
            Function to call updates for Task Indexes
            </summary>
        </member>
        <member name="M:TaskList.MainPage.DisplaySortedIndex">
            <summary>
            Function to display the Sorted Indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.DisplayAllTasks">
            <summary>
            Function to Display all Tasks
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.DisplayAllFolders">
            <summary>
            Function to display all Folders in debug console
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.DisplayTasksInFolders">
            <summary>
            Function to Verify that tasks were added to the folders then display them to the Debug Console
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.SearchByDescription">
            <summary>
            Function to Search Tasks for a given description
            </summary>
        </member>
        <member name="M:TaskList.MainPage.SearchByTodaysDate">
            <summary>
            Function to Search for tasks with a due date of Today
            </summary>
        </member>
        <member name="M:TaskList.MainPage.SearchByDate(System.String)">
            <summary>
            Function to Search for tasks with a given due date
            </summary>
            <param name="date"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TaskList.MainPage.TestAddTask">
            <summary>
            Function to Add a Task
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.TestRemoveTask(System.Guid)">
            <summary>
            Function to delete a task
            </summary>
            <param name="idToLookup"></param>
        </member>
        <member name="M:TaskList.MainPage.TestAddFolder">
            <summary>
            Function to Test adding a folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.TestRemoveFolder(TaskList.Folder)">
            <summary>
            Function to delete a folder
            </summary>
            <param name="folderAdded"></param>
        </member>
        <member name="M:TaskList.MainPage.CreateTaskDataFromInput(System.String)">
            <summary>
            Method to parse the input, and clean it checking for dates, ordinals and specific words or chars
            Using Microsoft.Recognizers Nuget packages, and regex.
            References:
            https://github.com/microsoft/Recognizers-Text/tree/master/.NET/Samples
            https://starbeamrainbowlabs.com/blog/article.php?article=posts%2F325-AI-Microsoft-Text-Recognizers.html
            https://stackoverflow.com/questions/52593835/parsing-timex-expressions-in-net-core
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.CheckAndAdjustForYear(System.DateTime,System.DateTime)">
            <summary>
            This function adjusts the Task datetime, to make sure it is not in a previous year,
            It will add the difference in years to make it this year
            and then recheck and make sure the adjusted date is not earlier in the year, 
            if it is it and the date is greater than 7 days earlier,
            It will add a year to make it next years event
            </summary>
            <param name="moment"></param>
            <param name="currentDate"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.CheckAndAdjustForFortnight(System.String,System.DateTime,System.DateTime)">
            <summary>
            This function adjusts a Task date for if a user inputs "fortnight"
            NOTE: "fortnight at 6pm" will not work, it needs to reference a day
            such as tomorrow fortnight at 6 or similar
            </summary>
            <param name="input"></param>
            <param name="moment"></param>
            <param name="currentDate"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.CheckAndAdjustMoment(System.String,System.DateTime,System.DateTime)">
            <summary>
            Function to check the DateTime moment and adjust it in reference to our current date
            this function makes calls to other functions to adjust for Year, Fortnight, and events
            </summary>
            <param name="input"></param>
            <param name="moment"></param>
            <param name="currentDate"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TaskList.MainPage.AdjustMomentForEvent(System.String,System.DateTime)" -->
        <member name="M:TaskList.MainPage.CheckAndUpdateTime(System.DateTime)">
            <summary>
            A function to update any default time values by adding 12 hours to adjust for AM/PM
            and then rechecking if it is still prior to the current time, and if it is add 1 day
            to effectively make it tomorrows event
            </summary>
            <param name="moment"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.GetDescription(System.String)">
            <summary>
            This Method splits the input string into tokens using regex
            removes any stop words (common words like "a", "the", "with", etc. as required) 
            Then joins the remaining tokens back into a string.
            https://www.geeksforgeeks.org/write-regular-expressions/#google_vignette
            https://www.tutorialspoint.com/Initializing-HashSet-in-Chash
            https://www.geeksforgeeks.org/hashset-in-c-sharp-with-examples/
            https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.split?view=net-8.0
            https://www.dotnetperls.com/regex-split
            https://thedeveloperblog.com/c-sharp/regex-split
            </summary>
            <param name="cleanedInput"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.MainPage.CheckUserInput(System.String)">
            <summary>
            Function to get a string tuple of the cleaned description,
            and the date as a string and display it in the UI
            </summary>
            <param name="userInput"></param>
        </member>
        <member name="M:TaskList.MainPage.CreateTaskFromTaskData(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            A function which will take the adjusted DateTime and input Data and create a Task Object
            </summary>
            <param name="description"></param>
            <param name="notes"></param>
            <param name="dateDue"></param>
        </member>
        <member name="M:TaskList.MainPage.Button_Click(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Button CLick Event for recieving input from user and converting it to a Task
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            
        </member>
        <member name="M:TaskList.MainPage.ErrorMessage">
            <summary>
            Error Message Function for invalid input
            </summary>
        </member>
        <member name="M:TaskList.MainPage.InputTextBox_TextChanged(System.Object,Windows.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            Event Handler to check for text changes in the Text Box and block any math symbols
            Reference: https://claude.ai/chat/ab0b5a8f-3b82-4249-bf1b-8677e5b5667a
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TaskList.MainPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:TaskList.MainPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:TaskList.MainPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:TaskList.TaskDataManagerSQL">
            <summary>
            A class which initialises  the database
            </summary>
        </member>
        <member name="M:TaskList.TaskDataManagerSQL.InitialiseDatabase">
            <summary>
            A methiod which initialises the database "open" ready for access
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.TaskDataManagerSQL.LoadDataBaseAsync">
            <summary>
            A Task that loads data in from the existing storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskList.TaskDataManagerSQL.UpdateDataBaseAsync(TaskList.Tasks)">
            <summary>
            A Task that takes a task and adds it the database
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.TaskDataManagerSQL.AddTaskAsync(TaskList.Tasks)">
            <summary>
            Helper task to call the UpdateDataBaseAsync method with the Task
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.TaskDataManagerSQL.DeleteTaskByIdAsync(System.Guid)">
            <summary>
            Task to delete a task from the database given its id
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TaskList.RepeatTask" -->
        <!-- Badly formed XML comment ignored for member "T:TaskList.Tasks" -->
        <member name="F:TaskList.Tasks.AllTasksList">
            <summary>
            Static list to hold all of the tasks
            </summary>
        </member>
        <member name="F:TaskList.Tasks.TasksByDateIndex">
            <summary>
            Static list to all tasks sorted by date
            </summary>
        </member>
        <member name="F:TaskList.Tasks.TasksByDescriptionIndex">
            <summary>
            Static class to hold all tasks sorted by description
            </summary>
        </member>
        <member name="M:TaskList.Tasks.AddTask(TaskList.Tasks)">
            <summary>
            A static method to add new tasks to the static list
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:TaskList.Tasks.RemoveTask(System.Guid)">
            <summary>
            A static method to remove a task from the static list using its GUID
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="M:TaskList.Tasks.GetTaskById(System.Guid)">
            <summary>
            Static method to get a task by its ID
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.Tasks.SearchByDescription(System.String)">
            <summary>
            Search tasks with a given description
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.Tasks.SearchByDueDate(System.Nullable{System.DateTime})">
            <summary>
            Search tasks with a given due date
            </summary>
            <param name="dueDate"></param>
            <returns></returns>
        </member>
        <member name="M:TaskList.Tasks.SortTasksByDate">
            <summary>
            Sort the tasks by date
            </summary>
        </member>
        <member name="M:TaskList.Tasks.SortTasksByDescription">
            <summary>
            Sort tasks by description
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TaskList.Tasks.UpdateTasksIndexes" -->
        <member name="M:TaskList.Tasks.ToString">
            <summary>
            Method that displays a Task description, notes and dateDue as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:TaskList.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:TaskList.TaskList_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
